# syntax=docker/dockerfile:1.4

ARG ALPINE_MAJ_MIN_VERSION="3.20"
ARG PYTHON_MAJ_MIN_VERSION="3.12"

ARG PYDANTIC_VERSION="2.7.4"

ARG PYTHON_LOCAL_SITE_PACKAGES="/usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/site-packages"

ARG BASE_IMAGE=python:${PYTHON_MAJ_MIN_VERSION}-alpine${ALPINE_MAJ_MIN_VERSION}
ARG PRE_BUILD_IMAGE=ghcr.io/nuvlaedge/ne-base:python${PYTHON_MAJ_MIN_VERSION}-pydantic${PYDANTIC_VERSION}


# ------------------------------------------------------------------------
# Squash and cleanup base image
# ------------------------------------------------------------------------
FROM ${BASE_IMAGE} AS base-image
ARG PYTHON_MAJ_MIN_VERSION
ARG PYTHON_LOCAL_SITE_PACKAGES

RUN apk del --no-cache tzdata krb5

# Remove wheel setuptools and pip
RUN pip uninstall -y wheel
RUN pip uninstall -y setuptools
RUN pip uninstall -y pip

RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/ensurepip
RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/idlelib
RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/pydoc_data
RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/distutils/command
RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/lib2to3
RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/unittest
RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/site-packages/wheel*
RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/config-*
RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/tkinter
RUN rm -Rf /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION}/turtledemo

RUN rm -Rf /usr/local/include/python${PYTHON_MAJ_MIN_VERSION}

RUN find ${PYTHON_LOCAL_SITE_PACKAGES} -name '*.py?' -delete
RUN find /usr/local/lib/python${PYTHON_MAJ_MIN_VERSION} -name '*.py?' -delete

RUN apk add --no-cache upx && upx --lzma $(find /usr/local/bin /usr/sbin /usr/bin /sbin /bin -type f -executable); apk del --no-cache upx

# Configuration files
COPY --link conf/example/* /etc/nuvlaedge/

# Docker auto cleanup
COPY --link scripts/docker-auto-cleanup/docker-prune.sh /usr/bin/docker-prune

# License
COPY --link LICENSE nuvlaedge/license.sh /opt/nuvlaedge/


# ------------------------------------------------------------------------
# NuvlaEdge base image for labels and environments variables
# ------------------------------------------------------------------------
FROM scratch AS nuvlaedge-base

COPY --link --from=base-image / /

ARG GIT_BRANCH
ARG GIT_COMMIT_ID
ARG GIT_BUILD_TIME
ARG GITHUB_RUN_NUMBER
ARG GITHUB_RUN_ID
ARG PROJECT_URL

LABEL git.branch=${GIT_BRANCH} \
      git.commit.id=${GIT_COMMIT_ID} \
      git.build.time=${GIT_BUILD_TIME} \
      git.run.number=${GITHUB_RUN_NUMBER} \
      git.run.id=${GITHUB_RUN_ID} \
      org.opencontainers.image.authors="support@sixsq.com" \
      org.opencontainers.image.created=${GIT_BUILD_TIME} \
      org.opencontainers.image.url=${PROJECT_URL} \
      org.opencontainers.image.vendor="SixSq SA" \
      org.opencontainers.image.title="NuvlaEdge slim docker" \
      org.opencontainers.image.description="Minimal NuvlaEdge image containing only job-engine and agent with docker support only"


# ------------------------------------------------------------------------
# Base builder stage containing the common python and alpine dependencies
# ------------------------------------------------------------------------
FROM ${PRE_BUILD_IMAGE} as pre-builder-pydantic
FROM ${BASE_IMAGE} AS base-builder

ARG PYTHON_LOCAL_SITE_PACKAGES

RUN apk update
RUN apk add gcc musl-dev linux-headers python3-dev libffi-dev upx curl

# Install pydantic form source to prevent bulding locally
COPY --link --from=pre-builder-pydantic ${PYTHON_LOCAL_SITE_PACKAGES} ${PYTHON_LOCAL_SITE_PACKAGES}

COPY --link requirements.txt /tmp/requirements.txt
RUN pip install -r /tmp/requirements.txt

RUN rm -f ${PYTHON_LOCAL_SITE_PACKAGES}/pip/_vendor/certifi/cacert.pem
RUN ln -s /etc/ssl/certs/ca-certificates.crt ${PYTHON_LOCAL_SITE_PACKAGES}/pip/_vendor/certifi/cacert.pem


# ------------------------------------------------------------------------
# Agent builder
# ------------------------------------------------------------------------
FROM docker AS docker
FROM base-builder AS agent-builder

ARG PYTHON_LOCAL_SITE_PACKAGES

# Docker and docker compose CLIs
COPY --link --from=docker /usr/local/bin/docker /usr/bin/docker
#COPY --link --from=docker /usr/local/libexec/docker/cli-plugins/docker-compose \
#                   /usr/local/libexec/docker/cli-plugins/docker-compose
# Docker Compose
RUN set -eux; \
    apkArch="$(apk --print-arch)"; \
    curl -L -o /usr/local/libexec/docker/cli-plugins/docker-compose --create-dirs \
         https://github.com/SixSq/docker-compose/releases/download/v2.29.0-sixsq/docker-compose-linux-${apkArch} && \
    chmod +x /usr/local/libexec/docker/cli-plugins/docker-compose

# Compress binaires
RUN upx --lzma \
        /usr/bin/docker \
        /usr/local/libexec/docker/cli-plugins/docker-compose

COPY --link requirements.agent.txt /tmp/
RUN pip install -r /tmp/requirements.agent.txt


# ------------------------------------------------------------------------
# Job Engine builder
# ------------------------------------------------------------------------
FROM base-builder AS job-engine-builder

COPY --link requirements.job-engine.txt /tmp/
RUN pip install -r /tmp/requirements.job-engine.txt


# ------------------------------------------------------------------------
# NuvlaEdge builder
# ------------------------------------------------------------------------
FROM base-builder AS nuvlaedge-builder

ARG PYTHON_MAJ_MIN_VERSION
ARG PYTHON_LOCAL_SITE_PACKAGES

# Extract and separate requirements from package install to accelerate building process.
# Package dependency install is the Slow part of the building process
COPY --link --from=agent-builder          ${PYTHON_LOCAL_SITE_PACKAGES}       ${PYTHON_LOCAL_SITE_PACKAGES}
COPY --link --from=job-engine-builder     ${PYTHON_LOCAL_SITE_PACKAGES}       ${PYTHON_LOCAL_SITE_PACKAGES}

COPY --link dist/nuvlaedge-*.whl /tmp/
RUN pip install --no-dependencies /tmp/nuvlaedge-*.whl

RUN rm -Rf $(find /usr/local/lib/python3.11/site-packages/nuvlaedge -maxdepth 1 \
                  -name system_manager \
#                  -or -name security \
#                  -or -name peripherals \
                  -or -name on_stop)

# Remove wheel setuptools and pip
RUN pip uninstall -y wheel
RUN pip uninstall -y setuptools
RUN pip uninstall -y pip

# Remove psutil tests
RUN rm -rf ${PYTHON_LOCAL_SITE_PACKAGES}/psutil/tests

# Cleanup python bytecode files
RUN find ${PYTHON_LOCAL_SITE_PACKAGES}/../ -name '*.py?' -delete


# ------------------------------------------------------------------------
# Final NuvlaEdge image
# ------------------------------------------------------------------------
FROM nuvlaedge-base AS nuvlaedge

ARG PYTHON_LOCAL_SITE_PACKAGES

# License
ONBUILD RUN ./license.sh

# Required packages
RUN apk add --no-cache upx \
        # Agent
        procps curl lsblk openssl iproute2-minimal && \
    upx --lzma $(find /usr/local/bin /usr/sbin /usr/bin /sbin /bin -type f -executable); \
    apk del --no-cache upx

COPY --link --from=agent-builder /usr/bin/docker /usr/bin/docker
COPY --link --from=agent-builder /usr/local/libexec/docker/cli-plugins/docker-compose \
                                 /usr/local/libexec/docker/cli-plugins/docker-compose

# Required python packages
COPY --link --from=nuvlaedge-builder ${PYTHON_LOCAL_SITE_PACKAGES} ${PYTHON_LOCAL_SITE_PACKAGES}
COPY --link --from=nuvlaedge-builder /usr/local/bin /usr/local/bin

# Job engine
RUN mkdir -p /app/ && ln -s ${PYTHON_LOCAL_SITE_PACKAGES}/nuvla/scripts/* /app/

# my_init
RUN wget -O /app/my_init https://raw.githubusercontent.com/phusion/baseimage-docker/rel-0.9.19/image/bin/my_init && \
    chmod 700 /app/my_init && \
    ln -s /app/my_init /usr/bin/my_init && \
    ln -s $(which python3) /usr/bin/python3


WORKDIR /opt/nuvlaedge/

ENTRYPOINT ["my_init"]
